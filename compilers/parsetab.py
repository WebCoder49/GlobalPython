
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND AS ASSERT BREAK CLASS COMMENT CONTINUE DEDENT DEF ELIF ELSE EXCEPT FINALLY FOR FROM GLOBAL ID IF IMPORT IN INDENT IS LAMBDA NONLOCAL NOT NUMBER OP OR PASS RETURN STRING TRY WHILE YIELDcodeblock : statement\n                | codeblock statement\n                | emptystatement : ID '=' expressionstatement : expressionstatement : '=' expression '=' expression : STRINGexpression : NUMBERexpression : IDexpression : expression '.' IDexpression : expression '(' commaseparated ')' expression : expression OP expressionexpression : '(' expression ')' expression : '[' commaseparated ']' expression : '(' commaseparated ')' commaseparated : expression\n                      | commaseparated ',' expression\n                      | emptyempty :"
    
_lr_action_items = {'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,23,24,25,27,28,29,30,31,32,],[4,4,-1,-3,-9,14,-5,-7,-8,14,14,-2,14,-9,25,14,14,-4,-6,-10,-12,-13,-15,14,-14,-11,]),'=':([0,1,2,3,4,6,7,8,11,13,14,23,24,25,27,28,29,31,32,],[5,5,-1,-3,12,-5,-7,-8,-2,24,-9,-4,-6,-10,-12,-13,-15,-14,-11,]),'STRING':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,23,24,25,27,28,29,30,31,32,],[7,7,-1,-3,-9,7,-5,-7,-8,7,7,-2,7,-9,7,7,-4,-6,-10,-12,-13,-15,7,-14,-11,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,23,24,25,27,28,29,30,31,32,],[8,8,-1,-3,-9,8,-5,-7,-8,8,8,-2,8,-9,8,8,-4,-6,-10,-12,-13,-15,8,-14,-11,]),'(':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,22,23,24,25,27,28,29,30,31,32,33,],[9,9,-1,-3,-9,9,16,-7,-8,9,9,-2,9,16,-9,9,9,16,16,16,-6,-10,16,-13,-15,9,-14,-11,16,]),'[':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,23,24,25,27,28,29,30,31,32,],[10,10,-1,-3,-9,10,-5,-7,-8,10,10,-2,10,-9,10,10,-4,-6,-10,-12,-13,-15,10,-14,-11,]),'$end':([0,1,2,3,4,6,7,8,11,14,23,24,25,27,28,29,31,32,],[-19,0,-1,-3,-9,-5,-7,-8,-2,-9,-4,-6,-10,-12,-13,-15,-14,-11,]),'.':([4,6,7,8,13,14,18,22,23,25,27,28,29,31,32,33,],[-9,15,-7,-8,15,-9,15,15,15,-10,15,-13,-15,-14,-11,15,]),'OP':([4,6,7,8,13,14,18,22,23,25,27,28,29,31,32,33,],[-9,17,-7,-8,17,-9,17,17,17,-10,17,-13,-15,-14,-11,17,]),')':([7,8,9,14,16,18,19,20,22,25,26,27,28,29,31,32,33,],[-7,-8,-19,-9,-19,28,29,-18,-16,-10,32,-12,-13,-15,-14,-11,-17,]),',':([7,8,9,10,14,16,18,19,20,21,22,25,26,27,28,29,31,32,33,],[-7,-8,-19,-19,-9,-19,-16,30,-18,30,-16,-10,30,-12,-13,-15,-14,-11,-17,]),']':([7,8,10,14,20,21,22,25,27,28,29,31,32,33,],[-7,-8,-19,-9,-18,31,-16,-10,-12,-13,-15,-14,-11,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codeblock':([0,],[1,]),'statement':([0,1,],[2,11,]),'empty':([0,9,10,16,],[3,20,20,20,]),'expression':([0,1,5,9,10,12,16,17,30,],[6,6,13,18,22,23,22,27,33,]),'commaseparated':([9,10,16,],[19,21,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codeblock","S'",1,None,None,None),
  ('codeblock -> statement','codeblock',1,'p_codeblock','python.py',113),
  ('codeblock -> codeblock statement','codeblock',2,'p_codeblock','python.py',114),
  ('codeblock -> empty','codeblock',1,'p_codeblock','python.py',115),
  ('statement -> ID = expression','statement',3,'p_statement_assignment','python.py',123),
  ('statement -> expression','statement',1,'p_statement_expression','python.py',133),
  ('statement -> = expression =','statement',3,'p_statement_parsertest','python.py',137),
  ('expression -> STRING','expression',1,'p_expression_literal_string','python.py',144),
  ('expression -> NUMBER','expression',1,'p_expression_literal_number','python.py',153),
  ('expression -> ID','expression',1,'p_expression_top','python.py',163),
  ('expression -> expression . ID','expression',3,'p_expression_branch','python.py',179),
  ('expression -> expression ( commaseparated )','expression',4,'p_expression_call','python.py',197),
  ('expression -> expression OP expression','expression',3,'p_expression_op','python.py',204),
  ('expression -> ( expression )','expression',3,'p_expression_paren','python.py',211),
  ('expression -> [ commaseparated ]','expression',3,'p_expression_literal_list','python.py',219),
  ('expression -> ( commaseparated )','expression',3,'p_expression_literal_tuple','python.py',228),
  ('commaseparated -> expression','commaseparated',1,'p_commaseparated','python.py',238),
  ('commaseparated -> commaseparated , expression','commaseparated',3,'p_commaseparated','python.py',239),
  ('commaseparated -> empty','commaseparated',1,'p_commaseparated','python.py',240),
  ('empty -> <empty>','empty',0,'p_empty','python.py',250),
]
